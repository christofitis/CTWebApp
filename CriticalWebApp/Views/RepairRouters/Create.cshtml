@model CriticalWebApp.Models.RepairRouter

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



<h2>Create</h2>
<div>
    <textarea id="rawEmailData" placeholder="Paste email here to autofill the form with that information."></textarea>
    <input type="button" value="FILL" id="getEmailButton" />
</div>

@using (Html.BeginForm("Create", "RepairRouters", FormMethod.Post, new { id = "repairRouterForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-inline" onkeydown="return (event.keyCode!=13)">
        <h4>RepairRouter</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*--------------------------------------------Contact-----------------------------------------------------------------------------------*@

        <div class="text-center">
            <h2><u>1. Contact</u></h2>
        </div>
        <div class="container" style="border:2px solid darkgrey;">
            <div class="form-group-sm">
                <div class="pull-right" style="border:solid; border-right-color: white; border-style: dotted; padding: 4px; margin: 0px 100px 0px 0px">
                    <h3>C.O.D.</h3>
                    @Html.LabelFor(model => model.isCODProduct, htmlAttributes: new { @class = "control-label" }):
                    @Html.EditorFor(model => model.isCODProduct, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.isCODProduct, "", new { @class = "text-danger" })
                    <br />
                    @Html.LabelFor(model => model.IsCodMoney, htmlAttributes: new { @class = "control-label" }):
                    @Html.EditorFor(model => model.IsCodMoney, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsCodMoney, "", new { @class = "text-danger" })
                </div>


                <div class="col-xs-2">
                    @Html.LabelFor(model => model.ContactDate, htmlAttributes: new { @class = "control-label" }):
                    @Html.EditorFor(model => model.ContactDate, new { htmlAttributes = new { @class = "form-control", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id = "ContactDatePicker" } })
                    @Html.ValidationMessageFor(model => model.ContactDate, "", new { @class = "text-danger" })
                </div>

                <div class="col-xs-2">
                    @Html.LabelFor(model => model.ContactedByPhone, htmlAttributes: new { @class = "control-label" }):
                    @Html.EditorFor(model => model.ContactedByPhone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactedByPhone, "", new { @class = "text-danger" })

                </div>

                <div class="col-xs-2">
                    @Html.LabelFor(model => model.ContactedByEmail, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.ContactedByEmail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ContactedByEmail, "", new { @class = "text-danger" })

                </div>

                <div class="col-xs-2" style="border:dotted 1px green">
                    @Html.LabelFor(model => model.TalkedTo, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.TalkedTo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TalkedTo, "", new { @class = "text-danger" })
                </div>
            </div>




            <br />
            <hr style="width: 100%; margin-top:1px; color: black; height: 1px; padding-top:1px; background-color:black;" />

            <div class="form-group-sm">
                <h4><u>Customer Information</u></h4>
                @Html.LabelFor(model => model.CurrentInQuickbooks, htmlAttributes: new { @class = "control-label " }):
                @Html.EditorFor(model => model.CurrentInQuickbooks, new { htmlAttributes = new { @class = "form-control " } })
                @Html.ValidationMessageFor(model => model.CurrentInQuickbooks, "", new { @class = "text-danger" })
            </div>
            <div class="form-group-sm">

                <div class="col-sm-4">
                    @Html.LabelFor(model => model.CustomerFirstName, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.CustomerFirstName, new { htmlAttributes = new { @class = "form-control ", id = "customerFirstNameInput" } })
                    @Html.ValidationMessageFor(model => model.CustomerFirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4">
                    @Html.LabelFor(model => model.CustomerLastName, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.CustomerLastName, new { htmlAttributes = new { @class = "form-control ", id = "customerLastNameInput" } })
                    @Html.ValidationMessageFor(model => model.CustomerLastName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4">
                    @Html.LabelFor(model => model.ShopName, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.ShopName, new { htmlAttributes = new { @class = "form-control ", id = "shopNameUserInput" } })
                    @Html.ValidationMessageFor(model => model.ShopName, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control ", id = "phoneNumberUserInput" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control ", @style = "width:700px", id = "emailUserInput" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-12">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @style = "width:700px", id = "shopAddressUserInput" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-3">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @style = "width:150px" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-2">
                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", @style = "width:60px" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-7">
                    @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control", @style = "width:200px" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>

            </div>


            <div class="form-group-sm">
                <form id="receiptForm">
                    <div class="col-xs-1">
                        <div id="receiptUploadBox" style="margin-top:10px; margin-bottom:5px; margin-left:auto; margin-right:auto; border:2px dashed black;">
                            <u>Receipt:</u>

                            <span id="uploadIcon" class="glyphicon glyphicon-save " style="font-size:50px" aria-hidden="true"></span>
                            <p style="font-size:8pt">(Drag & Drop Receipt File)</p>
                        </div>
                    </div>
                </form>

                    <div class="col-xs-3" style="margin-top:10px; margin-bottom:5px; margin-left:auto; margin-right:auto; border:2px dashed black;">
                        <p style="font-size:large">
                            <u>Warranty Status</u>
                            @Html.LabelFor(model => model.ProdInQB, htmlAttributes: new { @class = "control-label", @style = "margin-left: 20px; margin-right:auto; font-size:small" }):
                            @Html.EditorFor(model => model.ProdInQB, new { htmlAttributes = new { @class = "form-control " } })
                            @Html.ValidationMessageFor(model => model.ProdInQB, "", new { @class = "text-danger" })
                        </p>


                        @Html.LabelFor(model => model.DateOfPurchase, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.DateOfPurchase, new { htmlAttributes = new { @class = "form-control", @style = "width:200px", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id = "dateOfPurchasePicker" } })
                        @Html.ValidationMessageFor(model => model.DateOfPurchase, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.PlaceOfPurchase, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.PlaceOfPurchase, new { htmlAttributes = new { @class = "form-control", @style = "width:200px" } })
                        @Html.ValidationMessageFor(model => model.PlaceOfPurchase, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.CoveredUnderWarranty, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.CoveredUnderWarranty, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CoveredUnderWarranty, "", new { @class = "text-danger" })
                    </div>


                    <div class="col-xs-3" style="margin-top:10px; margin-bottom:20px; margin-left:30px; margin-right:auto; border:2px dashed green; padding-bottom:9px">
                        <p style="font-size:large"><u>Product Info</u></p>
                        @Html.LabelFor(model => model.ProductModel, htmlAttributes: new { @class = "control-label " }):
                        <select class="form-control" id="productList">
                            <option value="" disabled selected>Select a product</option>

                        </select>
                        @Html.HiddenFor(model => model.ProductModel, htmlAttributes: new { id = "productModelHidden" })
                        @*@Html.EditorFor(model => model.ProductModel, new { htmlAttributes = new { @class = "form-control", id = "productModelInput" } })*@
                        @Html.ValidationMessageFor(model => model.ProductModel, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.ProductSerialNumber, htmlAttributes: new { @class = "control-label " }):
                        <input type="text" class="form-control" style="width:200px" id="productSerialNumberInput" name="ProductSerialNumber" />
                        @Html.ValidationMessageFor(model => model.ProductSerialNumber, "", new { @class = "text-danger" })

                    </div>

                    <div class="col-xs-3" style="margin-top:10px; margin-bottom:auto; margin-left:30px; margin-right:auto; border:2px dashed black; padding-bottom:12px">
                        <p style="font-size:large"><u>Services</u></p>
                        @Html.LabelFor(model => model.IsWarrentyRepair, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.IsWarrentyRepair, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IsWarrentyRepair, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.IsReplaceRepackage, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.IsReplaceRepackage, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IsReplaceRepackage, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.IsReferbishPkg, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.IsReferbishPkg, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.IsReferbishPkg, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.PaidRepairAmount, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.PaidRepairAmount, new { htmlAttributes = new { @class = "form-control", @placeholder = "$", @style = "width:75px" } })
                        @Html.ValidationMessageFor(model => model.PaidRepairAmount, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-xs-12">
                        @Html.LabelFor(model => model.ReturnLabel, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.ReturnLabel, new { htmlAttributes = new { @class = "form-control", @style = "width:200px" } })
                        @Html.ValidationMessageFor(model => model.ReturnLabel, "", new { @class = "text-danger" })
                        @Html.LabelFor(model => model.ShipType, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.ShipType, new { htmlAttributes = new { @class = "form-control", @style = "width:200px" } })
                        @Html.ValidationMessageFor(model => model.ShipType, "", new { @class = "text-danger" })

                    </div>
                </div>
        </div>
        <hr style="width: 100%; margin-top:25px; color: black; height: 1px; padding-top:4px; background-color:black;" />
        @*--------------------------------------------Receive-------------------------------------------------------------------------------------*@


        <div class="text-center">
            <h2><u>2. Receive</u></h2>
        </div>
        <div class="container" style="border:2px solid darkgrey;">
            <div class="form-group-sm" style="margin-top:10px">
                <div class="col-xs-4">
                    @Html.LabelFor(model => model.DateReceived, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.DateReceived, new { htmlAttributes = new { @class = "form-control", @style = "width:200px", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id = "dateReceivedPicker" } })
                    @Html.ValidationMessageFor(model => model.DateReceived, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-8">
                    @Html.LabelFor(model => model.RMAReceivedBy, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.RMAReceivedBy, new { htmlAttributes = new { @class = "form-control", @style = "width:200px", id = "rmaReceivedByInput" } })
                    @Html.ValidationMessageFor(model => model.RMAReceivedBy, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-3" style="border:2px dashed black;height:160px; margin:5px;">

                    @Html.LabelFor(model => model.ProductReceived, htmlAttributes: new { @class = "control-label " }):
                    @Html.EditorFor(model => model.ProductReceived, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductReceived, "", new { @class = "text-danger" })
                    @Html.LabelFor(model => model.ProductModel, htmlAttributes: new { @class = "control-label " }):
                    <p id="productModelReceived"></p>
                    @Html.LabelFor(model => model.ProductSerialNumber, htmlAttributes: new { @class = "control-label " }):
                    <p id="productSerialNumbeReceived"></p>

                </div>
                <div class="col-xs-3" style="border:2px dashed black;margin:5px; height:160px;">
                    <p>What else was received?</p>
                    <p style="color: darkgray">(separate items by commas)</p>
                    @Html.LabelFor(model => model.OtherReceived, htmlAttributes: new { @class = "control-label " }):
                    @Html.TextAreaFor(model => model.OtherReceived, new { htmlAttributes = new { @class = "form-control", rows = "4" } })
                    @Html.ValidationMessageFor(model => model.OtherReceived, "", new { @class = "text-danger" })

                </div>


            </div>

        </div>
        <hr style="width: 100%; margin-top:25px; color: black; height: 1px; padding-top:4px; background-color:black;" />

        @*--------------------------------------------REPAIR-------------------------------------------------------------------------------------*@
        <div class="text-center">
            <h2><u>3. Repair</u></h2>
        </div>
        <div class="container" style="border:2px solid darkgrey;">
            <div class="form-group-sm" style="padding:10px">





                <div class="col-xs-6">
                    @Html.Label("Product Model: ", htmlAttributes: new { @class = "control-label" })
                    <span id="repairProductModel"></span>

                    @Html.Label("Serial #: ", htmlAttributes: new { @class = "control-label " })
                    <text id="repairSerialNumber"></text>

                </div>
                <div class="col-xs-12">
                    @Html.LabelFor(model => model.CustomerComplaint, htmlAttributes: new { @class = "control-label " }):
                    @Html.TextArea("CustomerComplaint", new { htmlAttributes = new {id = "CustomerComplaint" } })
                    @Html.ValidationMessageFor(model => model.CustomerComplaint, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-12">
                    @Html.LabelFor(model => model.SpecialInstructions, htmlAttributes: new { @class = "control-label " }):
                    @Html.TextAreaFor(model => model.SpecialInstructions, new { htmlAttributes = new { @class = "form-control", id = "specialInstructionsUserInput" } })
                    @Html.ValidationMessageFor(model => model.SpecialInstructions, "", new { @class = "text-danger" })
                </div>
                <div class="col-xs-12">
                    <p>
                        <h3><u>Repair Notes:</u></h3>
                        @Html.LabelFor(model => model.WasRepaired, htmlAttributes: new { @class = "control-label " }):
                        @Html.EditorFor(model => model.WasRepaired, new
                        {
                            htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.WasRepaired, "", new { @class = "text-danger" })
@Html.LabelFor(model => model.WasReplaced, htmlAttributes: new { @class = "control-label " }):
@Html.EditorFor(model => model.WasReplaced, new { htmlAttributes = new { @class = "form-control" } })
@Html.ValidationMessageFor(model => model.WasReplaced, "", new { @class = "text-danger" })
</p>
</div>
<div class="col-xs-12">
    @Html.LabelFor(model => model.RepairNotes, htmlAttributes: new { @class = "control-label " }):
    @Html.TextAreaFor(model => model.RepairNotes, new { htmlAttributes = new { @style = "background-color: red;" } })
    @Html.ValidationMessageFor(model => model.RepairNotes, "", new { @class = "text-danger" })
</div>
<div class="col-xs-3">
    @Html.LabelFor(model => model.RepairDoneBy, htmlAttributes: new { @class = "control-label " }):
    @Html.EditorFor(model => model.RepairDoneBy, new { htmlAttributes = new { @class = "form-control", @style = "width:120px" } })
    @Html.ValidationMessageFor(model => model.RepairDoneBy, "", new { @class = "text-danger" })
</div>
<div class="col-xs-3">
    @Html.LabelFor(model => model.RepairDate, htmlAttributes: new { @class = "control-label " }):
    @Html.EditorFor(model => model.RepairDate, new { htmlAttributes = new { @class = "form-control", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id = "repairDatePicker" } })
    @Html.ValidationMessageFor(model => model.RepairDate, "", new { @class = "text-danger" })
</div>
<div class="col-xs-6">

</div>
<div class="col-xs-6">
    @Html.LabelFor(model => model.OutSerialNumber, htmlAttributes: new { @class = "control-label " }):
    @Html.EditorFor(model => model.OutSerialNumber, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.OutSerialNumber, "", new { @class = "text-danger" })
</div>
<div class="col-xs-6">
    @Html.LabelFor(model => model.FirstTester, htmlAttributes: new { @class = "control-label " }):
    @Html.EditorFor(model => model.FirstTester, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.FirstTester, "", new { @class = "text-danger" })
    @Html.LabelFor(model => model.SecondTester, htmlAttributes: new { @class = "control-label " }):
    @Html.EditorFor(model => model.SecondTester, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.SecondTester, "", new { @class = "text-danger" })
</div>


</div>

</div>


<hr style="width: 100%; margin-top:25px; color: black; height: 1px; padding-top:4px; background-color:black;" />
<div class="col-xs-12" style="padding:10px">
    @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label " }):
    @Html.TextAreaFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
</div>

<div class="form-group ">
    @Html.HiddenFor(model => model.ReceiptFileName, htmlAttributes: new { id = "receiptFileNameHidden" })
    <div class="col-md-offset-2 col-md-10">
        <input type="submit" value="Create" class="btn btn-default" id="submitButton" />
    </div>
</div>
</div>


}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        //--------------------------receipt upload drag and drop -----------------------------
     

        function OnDragEnter(e) {
            e.stopPropagation();
            e.preventDefault();
        }

        function OnDragOver(e) {
            e.stopPropagation();
            e.preventDefault();
            $('#uploadIcon').css("color", "blue");

        }

        function OnDrop(e) {
            e.stopPropagation();
            e.preventDefault();
            selectedFiles = e.dataTransfer.files;
            console.log(selectedFiles[0].name);
            $('#receiptFileNameHidden').val(selectedFiles[0].name);
            console.log("upload");

            var receiptData = new FormData();
            for (var i = 0; i < selectedFiles.length; i++) {
                receiptData.append(selectedFiles[i].name, selectedFiles[i]);
            }
            $.ajax({
                type: "POST",
                url: '@Url.Content("~/FileHandler.ashx")',
                contentType: false,
                processData: false,
                data: receiptData,
                success: function (result) {
                    toastr.success("Receipt uploaded succesfully");
                    $("#receiptUploadBox").html("<u>Receipt:</u><span class='glyphicon glyphicon-check ' style='font-size:50px; color:green' aria-hidden='true'></span><p style='font-size:8pt'>(Uploaded!)</p>");


                },
                error: function () {
                    toastr.warning("There was error uploading files!");
                }
            });


            $("#receiptUploadBox").html("<u>Receipt:</u><span class='glyphicon glyphicon-check ' style='font-size:50px' aria-hidden='true'></span><p style='font-size:8pt'>(File Added)</p>");
            $('#receiptUploadButton').css("visibility", "visible");

        }






        //---------------autofill form with email-----------------------------
        $('#getEmailButton').on('click', function () {
            console.log("here we go!");

            var rawEmailData = $('#rawEmailData').val();
            var parsedEmail = {
            };

            console.log(rawEmailData.substring(rawEmailData.indexOf("Email:") + 6, rawEmailData.indexOf("Product Model:")));


            parsedEmail.Name = rawEmailData.substring(rawEmailData.indexOf("Name:") + 5, rawEmailData.indexOf("Shop Name:"));
            parsedEmail.ShopName = rawEmailData.substring(rawEmailData.indexOf("Shop Name:") + 10, rawEmailData.indexOf("Shop Address:"));
            parsedEmail.ShopAddress = rawEmailData.substring(rawEmailData.indexOf("Shop Address:") + 13, rawEmailData.indexOf("Billing Address (If different than shop address):"));
            parsedEmail.BillingAddress = rawEmailData.substring(rawEmailData.indexOf("Billing Address (If different than shop address):") + 49, rawEmailData.indexOf("Phone Number:"));
            parsedEmail.PhoneNumber = rawEmailData.substring(rawEmailData.indexOf("Phone Number:") + 13, rawEmailData.indexOf("Email:"));
            parsedEmail.Email = rawEmailData.substring(rawEmailData.indexOf("Email:") + 6, rawEmailData.indexOf("Product Model:"));
            parsedEmail.ProductModel = rawEmailData.substring(rawEmailData.indexOf("Product Model:") + 14, rawEmailData.indexOf("Serial Number:"));
            parsedEmail.SerialNumber = rawEmailData.substring(rawEmailData.indexOf("Serial Number:") + 14, rawEmailData.indexOf("Detailed Explanation of Issue:"));
            parsedEmail.ExplinationOfIssue = rawEmailData.substring(rawEmailData.indexOf("Detailed Explanation of Issue:") + 30, rawEmailData.indexOf("Comments / Special Instructions:"));
            parsedEmail.Comments = rawEmailData.substring(rawEmailData.indexOf("Comments / Special Instructions:") + 32, rawEmailData.indexOf("Receipt Upload"));
            parsedEmail.ReceiptUpload = rawEmailData.substring(rawEmailData.indexOf("Receipt Upload") + 14, rawEmailData.indexOf("I have read and agree to the above Warranty Terms of Service."));
            parsedEmail.AgreeToWarrantyTermsOfService = rawEmailData.substring(rawEmailData.indexOf("I have read and agree to the above Warranty Terms of Service.") + 61, rawEmailData.indexOf("Shop Address:"));



            $('#customerFirstNameInput').val(parsedEmail.Name);
            $('#shopNameUserInput').val(parsedEmail.ShopName);
            $('#shopAddressUserInput').val(parsedEmail.ShopAddress); //parse this out for city, state, zip
            $('#phoneNumberUserInput').val(parsedEmail.PhoneNumber);
            $('#emailUserInput').val(parsedEmail.Email);
            $('#productModelHidden').val(parsedEmail.ProductModel);
            $('#productSerialNumberInput').val(parsedEmail.SerialNumber);
            $('#CustomerComplaint').val(parsedEmail.ExplinationOfIssue);
            $('#specialInstructionsUserInput').val(parsedEmail.Comments);





            @*
            To:
            Webmaster

            Name:
                Chris Bryant

            Shop Name:
                Indiana Jones

            Shop Address:
                42 Wallaby Way Sydney Australia

            Billing Address (If different than shop address):
            same

            Phone Number:
                7757204057

            Email:
                chris13ryant@gmail.com

            Product Model:
                Power Supply CX-2R G2

            Serial Number:
                2R9999

            Detailed Explanation of Issue:
                It wont sync

            Comments / Special Instructions:


                Receipt Upload
            No file attached

            I have read and agree to the above Warranty Terms of Service.
            selected



                                *@




            });
        //------------------------------------------------------------------------




        $(document).ready(function () {

            var receiptUploadBox;
            box = document.getElementById("receiptUploadBox");
            box.addEventListener("dragenter", OnDragEnter, false);
            box.addEventListener("dragover", OnDragOver, false);
            box.addEventListener("drop", OnDrop, false);




            document.getElementById('ContactDatePicker').valueAsDate = new Date();

            $('#productList').on('change', function () {
                document.getElementById('productModelReceived').innerHTML = ($('#productList').val());
                document.getElementById('repairProductModel').innerHTML = ($('#productList').val());

            });
            $('#productSerialNumberInput').on('change', function () {
                document.getElementById('productSerialNumbeReceived').innerHTML = (document.getElementById('productSerialNumberInput').value);
                document.getElementById('repairSerialNumber').innerHTML = (document.getElementById('productSerialNumberInput').value);

            });
            $('#rmaReceivedByInput').on('change', function () {
                document.getElementById('rmaReceivedBy').innerHTML = (document.getElementById('rmaReceivedByInput').value);

            });


            var productListDropdown = $("#productList");
            $.getJSON("/Api/Products", null, function (data) {
                $("#productList option").remove(); // Remove all <option> child tags.
                var allProducts = [];
                var products = [];
                $.each(data, function (index, item) { // Iterates through a collection
                    allProducts.push(item);
                });

                $.each(allProducts, function (i, prod) {
                    if (($.inArray(prod.Name, products)) == -1) {
                        console.log(prod.Name);
                        products.push(prod.Name);
                        productListDropdown.append($("<option />").val(prod.Name).text(prod.Name));
                    }
                });
            });



        });
        $("#repairRouterForm").submit(function (event) {
           
                    if (confirm("Create a RMA for "
               + $('#customerFirstNameInput').val()
               + " "
               + $('#customerLastNameInput').val()
               + ". Are you sure?")) {
                        document.getElementById('productModelHidden').value = (document.getElementById('productList').value);
                        return true;
                    }
                    else {
                        event.preventDefault();
                        return false;
                    }
                



        });





        var serialNumbers = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Number'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,

            remote: {
                url: '/api/serialnumbers?numberQuery=%QUERY',
                wildcard: '%QUERY'
            }
        });
        //single serial add typeahead box
        $('#productSerialNumberInput').typeahead({
            minLength: 2,
            highlight: true
        }, {
            name: 'SerialNumbers',
            display: 'Number',
            source: serialNumbers
        }).on("typeahead:select", function (e, serialNumber) {
            toastr.success("Serial #: " + serialNumber.Number + " found!");
        });

    </script>











}
@*changes color of all input boxes, i didnt like it*@
<style>
    input[type=text] {
        color: white;
        border: 2px thin black;
        background-color: #2E3338;
        margin: 5px;
    }

    input[type=date] {
        color: white;
        background-color: #2E3338;
    }

    textarea {
        background-color: #2E3338;
        color: white;
        border: 2px thick black;
        vertical-align: top;
        width: 100%;
    }

    #repairProductModel {
        text-align: left;
    }

    .control-label {
        color: lightslategray;
    }
</style>


