@model CriticalWebApp.ViewModels.CreateSerialNumberViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Log a new Serial Number</h2>
@using (Html.BeginForm("Create", "SerialNumbers", FormMethod.Post, new { id = "serialNumberForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="radio">
            <label>
                <input type="radio" name="optionsRadios" id="optionsRadios1" value="option1">
                Add single number
            </label>
        </div>
        <div class="radio">
            <label>
                <input type="radio" name="optionsRadios" id="optionsRadios2" value="option2" checked>
                Add multiple #'s
            </label>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.Label("Product Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProductNames, new SelectList(Model.ProductNames, "ProductNames"), "Select Product", new { @class = "form-control", id = "productDropDownList" })
                @Html.ValidationMessageFor(model => model.ProductNames, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Hardware Revision", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="hardwareRevisionDropDown" id="hardwareRevisionsDropDownList"></select>
                @Html.ValidationMessageFor(model => model.Product.HardwareRevision, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Software Revision", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select class="form-control" name="softwareRevisionDropDown" id="softwareRevisionsDropDownList">Select one</select>
                @Html.ValidationMessageFor(model => model.Product.SoftwareRevision, "", new { @class = "text-danger" })
            </div>
        </div>
        

        @*replaced with dropdown list*@
        @*<div class="form-group"> 
            @Html.LabelFor(model => model.Product.HardwareRevision, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Product.HardwareRevision, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.HardwareRevision, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.SoftwareRevision, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Product.SoftwareRevision, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.SoftwareRevision, "", new { @class = "text-danger" })
            </div>
        </div>*@
     
            <div class="form-group">
                <div class="control-label col-md-2">First Number</div>
                <div class="col-md-10">
                    <div class="input-group">
                        <span class="input-group-addon" id="serialPrefixText"></span>
                        <input type="text" class="form-control" placeholder="XXXXXX" autocomplete="off" aria-describedby="serialPrefixText" , id="serialNumberTextBox">
                        @Html.ValidationMessageFor(model => model.SerialNumber.Number, "", new { @class = "text-danger" })

                    </div>
                </div>
            </div>
            <div class="form-group" id="endSerialNumberDiv">
                <div class="control-label col-md-2">End Number</div>
                <div class="col-md-10">
                    <div class="input-group">
                        <span class="input-group-addon" id="endSerialPrefixText"></span>
                        <input type="text" class="form-control" placeholder="XXXXXX" autocomplete="off" aria-describedby="serialPrefixText" , id="endSerialNumberTextBox">
                        @*@Html.ValidationMessageFor(model => model.SerialNumber.Number, "", new { @class = "text-danger" })*@

                    </div>
                </div>
            </div>
        

        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber.MFGDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SerialNumber.MFGDate, new { htmlAttributes = new { @class = "form-control", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id="MFGDatePicker" } })
                @Html.ValidationMessageFor(model => model.SerialNumber.MFGDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber.ShipDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SerialNumber.ShipDate, new { htmlAttributes = new { @class = "form-control", @type = "Date", @Value = DateTime.Now.ToShortDateString(), id = "ShipDatePicker" } })
                @Html.ValidationMessageFor(model => model.SerialNumber.ShipDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.SerialNumber.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SerialNumber.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        
        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber.CustomerFirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.SerialNumber.CustomerFirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SerialNumber.CustomerFirstName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SerialNumber.CustomerLastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.SerialNumber.CustomerLastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SerialNumber.CustomerLastName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.HiddenFor(model => model.SerialNumber.Number, new { id = "serialNumberHidden" })
                @Html.HiddenFor(model => model.EndSerialNumber, new { id = "endSerialNumberHidden" })
                @Html.HiddenFor(model => model.Product.SerialNumberPrefix, new { id = "serialNumberPrefixHidden" })
                @Html.HiddenFor(model => model.Product.HardwareRevision, new { id = "hardwareRevisionHidden" })
                @Html.HiddenFor(model => model.Product.SoftwareRevision, new { id = "softwareRevisionHidden" })
                <input type="submit" value="Create" class="btn btn-default" id="submitButton" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")


    <script type="text/javascript">
        $(document).ready(function(){

            document.getElementById('MFGDatePicker').valueAsDate = new Date();
            var isSingleEntry = false;
            document.getElementById('endSerialNumberHidden').value = 0;
        });


            document.getElementById('optionsRadios1').onclick = function(){
                document.getElementById('endSerialNumberDiv').style.display = 'none';
                document.getElementById('endSerialNumberTextBox').value = " ";

            };
            document.getElementById('optionsRadios2').onclick = function(){
                document.getElementById('endSerialNumberDiv').style.display = 'block';

            };

            var data = @Html.Raw(Json.Encode(Model.Products));

            @*gets a list of products for the javascript scope*@
            //TODO: could use this data[i]['Revision'] to help. revision checking
            //alert(data[1]['Name']);



        $('#productDropDownList').on('change', function () {
            $("#hardwareRevisionsDropDownList").empty();
            $("#softwareRevisionsDropDownList").empty();
                for (var i = 0; i < @Model.ProductsCount; i++) {
                    if (data[i]['Name'] == $(this).val()){
                        console.log($(this).val());
                        document.getElementById('serialPrefixText').innerHTML = data[i]['SerialNumberPrefix'];
                        document.getElementById('endSerialPrefixText').innerHTML = data[i]['SerialNumberPrefix'];
                        document.getElementById('serialNumberPrefixHidden').value = data[i]['SerialNumberPrefix'];
                        $("#hardwareRevisionsDropDownList").append( new Option(data[i]['HardwareRevision']))
                        



                        //console.log(data[i]['HardwareRevision']);
                    }
                }

        });
        $('#hardwareRevisionsDropDownList').on('change', function (){
            console.log($(this).val());
            $("#softwareRevisionsDropDownList").empty();
            for (var i = 0; i < @Model.ProductsCount; i++) {
                if (data[i]['HardwareRevision'] == $(this).val() && data[i]['Name'] == document.getElementById('productDropDownList').value){
                    $("#softwareRevisionsDropDownList").append( new Option(data[i]['SoftwareRevision']))
                }
            }
        });
            //$.ajax({
            //    type: 'GET',
            //    url: '/api/serialnumbers/',
            //    success: function(data){
            //        $.each(data, function(i, item){
            //            console.log(item.Number);
            //        });
            //    }
            //});


        $('#submitButton').on('click', function () {
            document.getElementById('serialNumberHidden').value = document.getElementById('serialNumberTextBox').value;
            document.getElementById('hardwareRevisionHidden').value = document.getElementById('hardwareRevisionsDropDownList').value;
            document.getElementById('softwareRevisionHidden').value = document.getElementById('softwareRevisionsDropDownList').value;
            if (document.getElementById('optionsRadios1').checked){
                document.getElementById('endSerialNumberHidden').value = 0;
            }
            else {
                document.getElementById('endSerialNumberHidden').value = document.getElementById('endSerialNumberTextBox').value;
            }
        });
        $("#serialNumberForm").submit(function(event){
            console.log("LOGGING SERIAL NUMBER")
            //var customerName = $("#customerFirstNameId").val() + ' ' + $("#customerLastNameId").val();
            if ($("#endSerialNumberTextBox").val() > 0){
                var numOfEntries = ($("#endSerialNumberTextBox").val() - $("#serialNumberTextBox").val())+1;
            }
            else{
                var numOfEntries = 1;
            }




            if (confirm("About to log: "
                + numOfEntries + " Entries -  "
                + $("#serialNumberPrefixHidden").val()
                +  $("#serialNumberTextBox").val()
                + " to "
                + $("#serialNumberPrefixHidden").val()
                + $("#endSerialNumberTextBox").val()
                + ". Are you sure?" ))
                return true;
            else{
                event.preventDefault();
                return false;
            }
        });

    </script>
}